#!/bin/bash
# mge-setup - Complete setup script for Memory Graph Extract
# This script handles virtual environment creation, dependency installation, and configuration

# Text formatting
BOLD="\033[1m"
GREEN="\033[32m"
BLUE="\033[34m"
CYAN="\033[36m"
RED="\033[31m"
YELLOW="\033[33m"
RESET="\033[0m"

# Configuration paths
USER_CONFIG_DIR="$HOME/.config/pdf_manipulator"
CONFIG_FILE="$USER_CONFIG_DIR/config.yaml"
PROJECT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
VENV_DIR="$PROJECT_DIR/venv"

# Welcome message
clear
echo -e "${BOLD}${BLUE}Memory Graph Extract Setup Wizard${RESET}"
echo -e "${CYAN}This script will help you set up Memory Graph Extract (mge) with all dependencies.${RESET}"
echo ""

# Function to check if a command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to print status
print_status() {
    echo -e "${CYAN}→${RESET} $1"
}

print_success() {
    echo -e "${GREEN}✓${RESET} $1"
}

print_error() {
    echo -e "${RED}✗${RESET} $1"
}

print_warning() {
    echo -e "${YELLOW}⚠${RESET} $1"
}

# Step 1: Check Python installation
echo -e "\n${BOLD}${BLUE}Step 1: Checking Python Installation${RESET}"
if command_exists python3; then
    PYTHON_VERSION=$(python3 --version 2>&1 | awk '{print $2}')
    PYTHON_MAJOR=$(echo "$PYTHON_VERSION" | cut -d. -f1)
    PYTHON_MINOR=$(echo "$PYTHON_VERSION" | cut -d. -f2)
    
    if [ "$PYTHON_MAJOR" -eq 3 ] && [ "$PYTHON_MINOR" -ge 8 ]; then
        print_success "Python $PYTHON_VERSION found (requirement: >=3.8)"
    else
        print_error "Python $PYTHON_VERSION found, but Python >=3.8 is required"
        exit 1
    fi
else
    print_error "Python 3 not found. Please install Python 3.8 or later."
    exit 1
fi

# Step 2: Virtual Environment Setup
echo -e "\n${BOLD}${BLUE}Step 2: Virtual Environment Setup${RESET}"

# Check if venv exists
if [ -d "$VENV_DIR" ]; then
    print_status "Virtual environment already exists at $VENV_DIR"
    read -p "Do you want to (u)se existing, (r)ecreate, or (q)uit? [u/r/q]: " venv_choice
    case "$venv_choice" in
        r|R)
            print_status "Removing existing virtual environment..."
            rm -rf "$VENV_DIR"
            ;;
        q|Q)
            echo "Exiting without changes."
            exit 0
            ;;
        *)
            print_status "Using existing virtual environment"
            ;;
    esac
fi

# Create virtual environment if it doesn't exist
if [ ! -d "$VENV_DIR" ]; then
    print_status "Creating virtual environment..."
    if python3 -m venv "$VENV_DIR"; then
        print_success "Virtual environment created successfully"
    else
        print_error "Failed to create virtual environment"
        exit 1
    fi
fi

# Activate virtual environment
print_status "Activating virtual environment..."
source "$VENV_DIR/bin/activate"
print_success "Virtual environment activated"

# Step 3: Upgrade pip and setuptools
echo -e "\n${BOLD}${BLUE}Step 3: Upgrading Package Tools${RESET}"
print_status "Upgrading pip and setuptools..."
if pip install --upgrade pip setuptools wheel >/dev/null 2>&1; then
    print_success "Package tools upgraded successfully"
else
    print_error "Failed to upgrade package tools"
    exit 1
fi

# Step 4: Install package
echo -e "\n${BOLD}${BLUE}Step 4: Installing Memory Graph Extract${RESET}"

# Ask about optional dependencies
echo -e "\n${CYAN}Select installation type:${RESET}"
echo "1) Basic installation (core functionality)"
echo "2) Development installation (includes test tools)"
echo "3) Full installation (all optional features)"

read -p "Enter your choice [1-3]: " install_choice

case "$install_choice" in
    2)
        print_status "Installing with development dependencies..."
        INSTALL_CMD="pip install -e '.[dev]'"
        ;;
    3)
        print_status "Installing with all dependencies..."
        INSTALL_CMD="pip install -e '.[dev,test]'"
        ;;
    *)
        print_status "Installing basic package..."
        INSTALL_CMD="pip install -e ."
        ;;
esac

# Install the package
cd "$PROJECT_DIR"
if eval "$INSTALL_CMD"; then
    print_success "Memory Graph Extract installed successfully"
else
    print_error "Failed to install Memory Graph Extract"
    exit 1
fi

# Step 5: Download NLTK data
echo -e "\n${BOLD}${BLUE}Step 5: Downloading NLTK Data${RESET}"

print_status "Downloading required NLTK data..."
python3 -c "
import nltk
import ssl

# Handle SSL certificate issues
try:
    _create_unverified_https_context = ssl._create_unverified_context
except AttributeError:
    pass
else:
    ssl._create_default_https_context = _create_unverified_https_context

# Download required NLTK data
try:
    nltk.download('punkt', quiet=True)
    nltk.download('stopwords', quiet=True)
    nltk.download('averaged_perceptron_tagger', quiet=True)
    print('NLTK data downloaded successfully')
except Exception as e:
    print(f'Warning: Failed to download NLTK data: {e}')
    print('You may need to download it manually later')
" 2>/dev/null

if [ $? -eq 0 ]; then
    print_success "NLTK data downloaded successfully"
else
    print_warning "Failed to download NLTK data - you may need to download it manually"
    echo "   Run: python -c \"import nltk; nltk.download(['punkt', 'stopwords', 'averaged_perceptron_tagger'])\""
fi

# Step 6: OpenAI API Configuration
echo -e "\n${BOLD}${BLUE}Step 6: OpenAI API Configuration${RESET}"

# Check for existing .env file
ENV_FILE="$PROJECT_DIR/.env"
OPENAI_KEY_SET=false

if [ -f "$ENV_FILE" ]; then
    # Check if OPENAI_API_KEY is already set
    if grep -q "OPENAI_API_KEY=" "$ENV_FILE" 2>/dev/null; then
        print_status "Existing OpenAI API key found in .env file"
        OPENAI_KEY_SET=true
    fi
fi

# Check environment variable
if [ -n "$OPENAI_API_KEY" ]; then
    print_status "OpenAI API key found in environment"
    OPENAI_KEY_SET=true
fi

# Prompt for API key if not set
if [ "$OPENAI_KEY_SET" = false ]; then
    echo -e "\n${CYAN}OpenAI API key is required for enhanced AI features.${RESET}"
    echo -e "${CYAN}You can get an API key from: https://platform.openai.com/api-keys${RESET}"
    echo ""
    read -p "Enter your OpenAI API key (or press Enter to skip): " openai_key
    
    if [ -n "$openai_key" ]; then
        # Validate API key format (should start with sk- and have reasonable length)
        # OpenAI keys can have different formats: sk-..., sk-proj-..., etc.
        if [[ "$openai_key" =~ ^sk-[a-zA-Z0-9_-]{20,}$ ]]; then
            # Create or update .env file
            if [ -f "$ENV_FILE" ]; then
                # Remove existing OPENAI_API_KEY if present
                grep -v "^OPENAI_API_KEY=" "$ENV_FILE" > "$ENV_FILE.tmp" || true
                mv "$ENV_FILE.tmp" "$ENV_FILE"
            fi
            
            # Add new API key
            echo "OPENAI_API_KEY=$openai_key" >> "$ENV_FILE"
            print_success "OpenAI API key saved to .env file"
            OPENAI_KEY_SET=true
            
            # Ensure .env is in .gitignore
            if [ -f "$PROJECT_DIR/.gitignore" ]; then
                if ! grep -q "^\.env$" "$PROJECT_DIR/.gitignore" 2>/dev/null; then
                    echo ".env" >> "$PROJECT_DIR/.gitignore"
                    print_status "Added .env to .gitignore for security"
                fi
            fi
            
            # Test the API key
            print_status "Testing OpenAI API key..."
            if python3 -c "
import os
import openai
os.environ['OPENAI_API_KEY'] = '$openai_key'
try:
    client = openai.OpenAI()
    models = client.models.list()
    print('API key is valid')
    exit(0)
except Exception as e:
    print(f'API key test failed: {e}')
    exit(1)
" 2>/dev/null; then
                print_success "OpenAI API key validated successfully"
                
                # Offer to add to shell startup script
                echo ""
                print_status "Detecting shell environment..."
                
                # Detect the shell
                SHELL_NAME=$(basename "$SHELL")
                SHELL_RC=""
                
                case "$SHELL_NAME" in
                    bash)
                        SHELL_RC="$HOME/.bashrc"
                        print_status "Detected bash shell"
                        ;;
                    zsh)
                        SHELL_RC="$HOME/.zshrc"
                        print_status "Detected zsh shell"
                        ;;
                    *)
                        print_warning "Unknown shell: $SHELL_NAME"
                        ;;
                esac
                
                if [ -n "$SHELL_RC" ]; then
                    read -p "Add OPENAI_API_KEY to $SHELL_RC for permanent access? [Y/n]: " add_to_shell
                    case "$add_to_shell" in
                        n|N)
                            print_status "Skipping shell configuration"
                            echo -e "${YELLOW}Note:${RESET} To use the API key in future sessions, add to your shell:"
                            echo -e "  ${CYAN}export OPENAI_API_KEY='$openai_key'${RESET}"
                            ;;
                        *)
                            # Check if already exists
                            if grep -q "export OPENAI_API_KEY=" "$SHELL_RC" 2>/dev/null; then
                                print_warning "OPENAI_API_KEY already exists in $SHELL_RC"
                                echo "   To update it, edit $SHELL_RC manually"
                            else
                                # Add to shell RC file
                                echo "" >> "$SHELL_RC"
                                echo "# Memory Graph Extract - OpenAI API Key" >> "$SHELL_RC"
                                echo "export OPENAI_API_KEY='$openai_key'" >> "$SHELL_RC"
                                print_success "Added OPENAI_API_KEY to $SHELL_RC"
                                echo -e "${CYAN}Run 'source $SHELL_RC' or start a new terminal for changes to take effect${RESET}"
                            fi
                            ;;
                    esac
                else
                    echo -e "${YELLOW}Note:${RESET} Could not detect shell configuration file"
                    echo -e "To use the API key in future sessions, add this to your shell startup script:"
                    echo -e "  ${CYAN}export OPENAI_API_KEY='$openai_key'${RESET}"
                fi
            else
                print_warning "Could not validate API key - it may be incorrect or there may be a network issue"
            fi
        else
            print_warning "Invalid API key format. OpenAI keys should start with 'sk-'"
            echo "   You can add it later to the .env file as: OPENAI_API_KEY=your-key-here"
        fi
    else
        print_warning "Skipping OpenAI API key configuration"
        echo "   You can add it later to the .env file as: OPENAI_API_KEY=your-key-here"
    fi
fi

# Step 7: Check external dependencies
echo -e "\n${BOLD}${BLUE}Step 7: Checking External Dependencies${RESET}"

# Check for Tesseract
if command_exists tesseract; then
    TESSERACT_VERSION=$(tesseract --version 2>&1 | head -n 1)
    print_success "Tesseract found: $TESSERACT_VERSION"
else
    print_warning "Tesseract not found - OCR features will be limited"
    echo "   Install with: sudo apt-get install tesseract-ocr (Ubuntu/Debian)"
    echo "                 brew install tesseract (macOS)"
fi

# Check for Ollama
if curl -s --head --fail "http://localhost:11434/api/tags" >/dev/null 2>&1; then
    print_success "Ollama detected at http://localhost:11434"
    OLLAMA_AVAILABLE=true
else
    print_warning "Ollama not detected - Local AI features will be limited"
    echo "   Install from: https://ollama.ai"
    OLLAMA_AVAILABLE=false
fi

# Step 8: Configuration
echo -e "\n${BOLD}${BLUE}Step 8: Configuration${RESET}"

# Create config directories if they don't exist
mkdir -p "$USER_CONFIG_DIR"

# Check if config already exists
if [ -f "$CONFIG_FILE" ]; then
    print_status "Existing configuration detected"
    read -p "Do you want to (k)eep existing, (r)econfigure, or (s)kip? [k/r/s]: " config_choice
    case "$config_choice" in
        r|R)
            CREATE_CONFIG=true
            ;;
        s|S)
            CREATE_CONFIG=false
            ;;
        *)
            CREATE_CONFIG=false
            print_status "Keeping existing configuration"
            ;;
    esac
else
    read -p "Do you want to create a configuration file? [Y/n]: " create_config
    case "$create_config" in
        n|N)
            CREATE_CONFIG=false
            ;;
        *)
            CREATE_CONFIG=true
            ;;
    esac
fi

if [ "$CREATE_CONFIG" = true ]; then
    # Determine default backend based on available services
    if [ "$OPENAI_KEY_SET" = true ]; then
        DEFAULT_BACKEND="openai"
    elif [ "$OLLAMA_AVAILABLE" = true ]; then
        DEFAULT_BACKEND="ollama"
    else
        DEFAULT_BACKEND="markitdown"
    fi
    
    # Simple configuration for memory graph setup
    cat > "$CONFIG_FILE" << EOF
# Memory Graph Extract Configuration
# Generated by setup script on $(date)

# General settings
general:
  output_dir: "output"
  logging:
    level: "INFO"

# Memory graph settings
memory:
  enabled: true
  database_name: "memory_graph.db"
  domain:
    name: "knowledge"
    description: "Document knowledge base"
  extraction:
    detect_relationships: true
    generate_summaries: true
    min_content_length: 50

# AI intelligence configuration
intelligence:
  default_backend: "$DEFAULT_BACKEND"
  backends:
    markitdown:
      # Direct semantic extraction (fastest, limited understanding)
    ollama:
      model: "llava:latest"
      base_url: "http://localhost:11434"
      timeout: 120
    openai:
      api_key: \${OPENAI_API_KEY}  # Use environment variable
      model: "gpt-4o-mini"  # Cost-effective model for document processing
      max_tokens: 4096
      temperature: 0.1
      timeout: 60
    memory_enhanced:
      use_context: true
      backend: "$DEFAULT_BACKEND"  # Use the best available backend

# Document processing settings
processing:
  default_prompt: "Extract semantic content from this document, identifying key concepts, relationships, and structure."
  use_ocr_fallback: true

# PDF rendering settings
rendering:
  dpi: 300
  alpha: false
  zoom: 1.0
EOF

    print_success "Configuration file created at $CONFIG_FILE"
fi

# Step 9: Create activation script
echo -e "\n${BOLD}${BLUE}Step 9: Creating Convenience Scripts${RESET}"

# Create an activation script
ACTIVATE_SCRIPT="$PROJECT_DIR/activate.sh"
cat > "$ACTIVATE_SCRIPT" << 'EOF'
#!/bin/bash
# Activate the Memory Graph Extract virtual environment

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
VENV_DIR="$SCRIPT_DIR/venv"

if [ -d "$VENV_DIR" ]; then
    source "$VENV_DIR/bin/activate"
    echo "Memory Graph Extract environment activated"
    echo "Use 'mge' command to start extracting documents"
else
    echo "Virtual environment not found. Run ./scripts/mge-setup first."
fi
EOF

chmod +x "$ACTIVATE_SCRIPT"
print_success "Created activation script: ./activate.sh"

# Step 10: Test installation
echo -e "\n${BOLD}${BLUE}Step 10: Testing Installation${RESET}"

print_status "Verifying mge command..."
if mge --version >/dev/null 2>&1; then
    print_success "mge command is working"
else
    print_warning "mge command not found in PATH"
fi

# Final summary
echo -e "\n${BOLD}${GREEN}Setup Complete!${RESET}"

# Show configured backend
echo -e "\n${BOLD}AI Backend Configuration:${RESET}"
if [ "$OPENAI_KEY_SET" = true ]; then
    echo -e "  ${GREEN}✓${RESET} OpenAI API configured (default backend)"
    echo -e "    Using cost-effective gpt-4o-mini model"
elif [ "$OLLAMA_AVAILABLE" = true ]; then
    echo -e "  ${GREEN}✓${RESET} Ollama configured (default backend)"
    echo -e "    Using local llava:latest model"
else
    echo -e "  ${YELLOW}⚠${RESET} Using basic markitdown backend"
    echo -e "    Limited AI capabilities - consider adding OpenAI API key"
fi

echo -e "\n${BOLD}To use Memory Graph Extract:${RESET}"
echo -e "1. Activate the environment: ${CYAN}source activate.sh${RESET}"
echo -e "2. Extract documents: ${CYAN}mge extract document.pdf output/ --memory${RESET}"
echo -e "3. Process directories: ${CYAN}mge extract-dir papers/ output/ --memory --recursive${RESET}"

echo -e "\n${BOLD}Quick Commands:${RESET}"
echo -e "  ${CYAN}mge --help${RESET}              # Show all commands"
echo -e "  ${CYAN}mge memory --help${RESET}       # Memory graph operations"
echo -e "  ${CYAN}mge config --edit${RESET}       # Edit configuration"

# Provide recommendations based on setup
if [ "$OPENAI_KEY_SET" = false ]; then
    echo -e "\n${YELLOW}Recommendation:${RESET} Add an OpenAI API key for best results:"
    echo -e "  1. Get a key from: ${CYAN}https://platform.openai.com/api-keys${RESET}"
    echo -e "  2. Add to .env file: ${CYAN}echo 'OPENAI_API_KEY=your-key' >> .env${RESET}"
fi

if [ "$OLLAMA_AVAILABLE" = false ] && [ "$OPENAI_KEY_SET" = false ]; then
    echo -e "\n${YELLOW}Alternative:${RESET} Install Ollama for local AI processing:"
    echo -e "  Visit: ${CYAN}https://ollama.ai${RESET}"
fi

echo -e "\n${BOLD}Documentation:${RESET}"
echo -e "  - Quick Start: ${CYAN}docs/quickstart.md${RESET}"
echo -e "  - Architecture: ${CYAN}docs/architecture.md${RESET}"
echo -e "  - Configuration: ${CYAN}docs/configuration.md${RESET}"

echo -e "\nHappy extracting! 🚀"